name: XRTK CI

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: Ubuntu-latest

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

    steps:
      - id: setup-matrix
        name: setup build matrix
        run: |
          $matrixJson = '{"include":[{"os":"windows","buildTargets":["Android","Standalone64","WSAPlayer"],"editorPath":"","projectPath":""},{"os":"macos","buildTargets":["Android"],"editorPath":"","projectPath":""}]}'
          $matrixJson.replace('"','\"')
          echo "::set-output name=matrix::$matrixJson"
        shell: pwsh

  validate:
    needs: setup
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}

    outputs:
      windows-editor-path: ${{ steps.set-build-matrix.outputs.matrix.windows-editor-path }}
      windows-project-path: ${{ steps.set-build-matrix.outputs.matrix.windows-project-path }}
      macos-editor-path: ${{ steps.set-build-matrix.outputs.matrix.macos-editor-path }}
      macos-project-path: ${{ steps.set-build-matrix.outputs.matrix.macos-project-path }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          clean: true

      - id: unity-validate
        name: Unity Editor Validation
        uses: xrtk/unity-validate@main

      - id: set-build-matrix
        name: set build matrix
        run: |
          $matrix = '${{ toJSON(matrix) }}' | ConvertFrom-Json -Depth 5
          $editorPath = '${{ steps.unity-validate.outputs.editor-path }}'
          $projectPath = '${{ steps.unity-validate.outputs.project-path }}'

          if ([string]::IsNullOrEmpty($editorPath)) {
            echo "failed to find a valid editor path"
            exit 1
          }

          if ([string]::IsNullOrEmpty($projectPath)) {
            echo "failed to find a valid project path"
            exit 1
          }

          echo "::set-output name=${{ matrix.os }}-editor-path::$editorPath"
          echo "::set-output name=${{ matrix.os }}-project-path::$projectPath"

        shell: pwsh

      - uses: xrtk/unity-action@main
        name: Project Validation
        with:
          name: 'project-validation'
          editor-path: '${{ steps.unity-validate.outputs.editor-path }}'
          project-path: '${{ steps.unity-validate.outputs.project-path }}'
          args: '-quit -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject'

      - uses: actions/upload-artifact@v2
        name: Upload Artifacts
        if: always()
        with:
          name: 'Validation-Results'
          path: '${{ steps.unity-validate.outputs.project-path }}/Builds/Logs'

      - name: Cleanup Job
        run: |
          $logDirectory = "${{ steps.unity-validate.outputs.project-path }}/Builds"

          if (Test-Path -Path $logDirectory) {
            Remove-Item $logDirectory -Force -Recurse
          }
        shell: pwsh

  setup-build-matrix:
    runs-on: Ubuntu-latest
    needs: [validate, setup]

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

    steps:
      - id: setup-matrix
        run: |
          echo '${{ needs.validate.outputs.windows-editor-path }}'
          echo '${{ needs.validate.outputs.windows-project-path }}'
          echo '${{ needs.validate.outputs.macos-editor-path }}'
          echo '${{ needs.validate.outputs.macos-project-path }}'
          echo '${{ needs.setup.outputs.matrix }}'

          $include = '${{ needs.setup.outputs.matrix }}' | ConvertFrom-Json -Depth 5
          echo $include

          foreach ($item in $includes) {
            if ($item.os -eq 'windows') {
              $item.editorPath = '${{ needs.validate.outputs.windows-editor-path }}'
              $item.projectPath = '${{ needs.validate.outputs.windows-project-path }}'
            }

            if ($item.os -eq 'macos') {
              $item.editorPath = '${{ needs.validate.outputs.macos-editor-path }}'
              $item.projectPath = '${{ needs.validate.outputs.macos-project-path }}'
            }
          }

          $matrixJson = $include | ConvertTo-Json -Compace -Depth 5
          $matrixJson.replace('"','\"')
          echo "::set-output name=matrix::$matrixJson"
        shell: pwsh

  build:
    needs: setup-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.setup-build-matrix.outputs.matrix) }}

      max-parallel: 1

    steps:
      - uses: xrtk/unity-action@main
        name: '${{ matrix.buildTarget }}-Tests'
        with:
          name: '${{ matrix.buildTarget }}-Tests'
          editor-path: '${{ matrix.editorPath }}'
          project-path: '${{ matrix.projectPath }}'
          build-target: '${{ matrix.buildTarget }}'
          args: '-batchmode -runEditorTests'

      - uses: xrtk/unity-action@main
        name: '${{ matrix.buildTarget }}-Build'
        with:
          name: '${{ matrix.buildTarget }}-Build'
          editor-path: '${{ matrix.editorPath }}'
          project-path: '${{ matrix.projectPath }}'
          build-target: '${{ matrix.buildTarget }}'
          args: '-quit -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild'

      - name: Zip Artifacts
        if: always()
        run: |
          $artifacts = "${{ matrix.projectPath }}/Builds"

          if (Test-Path -Path $artifacts) {
            Compress-Archive -Path "$artifacts/*" -DestinationPath ${{ github.workspace }}/${{ matrix.buildTarget }}-Artifacts.zip -Force
            Remove-Item $artifacts -Force -Recurse
          }
        shell: pwsh

      - uses: actions/upload-artifact@v2
        name: Upload Artifacts
        if: always()
        with:
          name: '${{ matrix.buildTarget }}-Artifacts'
          path: '${{ github.workspace }}/${{ matrix.buildTarget }}-Artifacts.zip'

  publish:
    if: ${{ github.ref == 'refs/heads/main' || github.base_ref == 'main' }}
    needs: build
    runs-on:  ubuntu-latest

    steps:
      - uses: xrtk/upm-release@main
        name: publish upm package
        with:
          upm-username: 'xrtk-build-bot'
          upm-email: 'xrtk-build-bot@xrtk.io'
          upm-server-address: 'http://upm.xrtk.io:4873'
          upm-auth-token: '${{ secrets.UPM_CREDENTIALS }}'
          github-username: 'XRTK-Build-Bot'
          github-pat: '${{ secrets.GITHUB_PAT }}'
          github-token: '${{ secrets.GITHUB_TOKEN }}'
